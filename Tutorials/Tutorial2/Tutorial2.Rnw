\documentclass{article}
\usepackage{hyperref}
\usepackage[top=2in, bottom=1.5in, left=1in, right=1in]{geometry}
\usepackage{exercise}

% For tilde
\usepackage{xspace}
\newcommand{\mytilde}{\lower.80ex\hbox{\char`\~}\xspace}

%%%% Notes to improve the tutorial
% Notes from after the class:
% Many had issues with the first exercise because 
% the when they created a SpatialPoints the columns latitude and longitude became the coordinates 
% and thus could not be called by the latitude and longitude column name.
% They all tried to use the lapply code line on a SpatialPoints and got into problems.
% Maybe change the lappy example so it uses the SpatialPoints instead of the data.frame 
% and use the coordinates() function, instead of using the lat lon column.
% Fix the waveglider data, for some reason the dates dropped significant digites and so the time is rounded of and has duplicates.
% Also reformulate the question to say what should be added in the SpatialLinesDataFrame attributes.

% Maybe add the join based on the plyr example, see the lovelace tutorial. Could also do this with points

\begin{document}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Hooks
% Hook for tilde
<<setup, include=FALSE>>=
library(knitr)
hook_source = knit_hooks$get('source')
knit_hooks$set(source = function(x, options) {
  txt = hook_source(x, options)
  # extend the default source hook
  gsub('~', '\\\\mytilde', txt)
})
@
<<setupOp, include=FALSE>>=
opts_chunk$set(fig.width=4, fig.height=4, fig.align="center", tidy=TRUE,
               tidy.opts=list(blank=FALSE, width.cutoff=52),
               size="large")
@

\author{Marie Auger-M\'eth\'e}
\title{GIS in R: Tutorial 2}
\date{}
\maketitle

\large
\section{\texttt{Spatial} class}

%%%%%%%%%%%

We will investigate two new classes of \texttt{Spatial} objects: \texttt{SpatialLines} and \texttt{SpatialPolygons}. Both of these classes are more complex than the \texttt{SpatialPoints} class we investigated during the last tutorial. First we will explore the slots associated with these objects. Remember that slots represents the important components of an object. To identify the slots of an object class, you can use the function \texttt{getSlots}.

<<SpatialClass>>=
# Just like SpatialPoints, SpatialLines and SpatialPolygons are object classes associated with the sp package
library(sp)
# Get the slots of SpatialPoints
getSlots("SpatialPoints")
# Get the slots of SpatialLines
getSlots("SpatialLines")
# Get the slots of SpatialPolygons
getSlots("SpatialPolygons")
@

We can note here that a \texttt{SpatialPoints} object has three slots: \texttt{coords} with the coordinates of each points, \texttt{bbox} with the bounding box (extent) of the points, and \texttt{proj4sting} with the coordinate reference system (CRS). While \texttt{SpatialLines} and \texttt{SpatialPolygons} have the \texttt{bbox} and \texttt{proj4string} slots just like \texttt{SpatialPoints}, they do not have the \texttt{coords} slot. Instead, \texttt{SpatialLines} and \texttt{SpatialPolygons} use the \texttt{lines} and \texttt{polygons} slots. These two slots are in fact lists of objects of class \texttt{Lines} and \texttt{Polygons}. Let's investigate the slots of \texttt{Lines} and \texttt{Polygons}.

<<linespolygons>>=
# Note that both these object classes have slots that are lists.

# Get the slots of Lines
getSlots("Lines")
# Get the slots of Polygons
getSlots("Polygons")
@

As we can see, the \texttt{Lines} and \texttt{Polygons} objects also have a slot for lists. These slots take a list of objects of class \texttt{Line} or \texttt{Polygon}. \texttt{Lines} and \texttt{Polygons} also have an \texttt{ID} slot. This slot can only take a single character value. In the case of \texttt{Lines}, this ID connects all the \texttt{Line} objects that are in a \texttt{Lines} object with a single indentifier. Let's investigate the slots on \texttt{Line} and \texttt{Polygon}.


<<LinePolygon>>=
# Look at the slots of the fundamental class for SpatialLines
getSlots("Line")
# Look at the slots of the fundamental class for SpatialPolygon
getSlots("Polygon")
# Note that both have the coords slot
@

The very basis of the \texttt{SpatialLines} and \texttt{SpatialPolygons} are the class \texttt{Line} and \texttt{Polygon}, which as we can see above are the classes that have a slot for coordinates. While \texttt{Line} and \texttt{Polygon} have the coordinates (\texttt{coords}), only \texttt{SpatialLines} and \texttt{SpatialPolygons} have the \texttt{bbox} and the \texttt{proj4string} slots.

\subsection{\texttt{SpatialLines}}

\subsubsection{One movement path}

Here we are going to create a \texttt{SpatialLines} object based on the locations of grey seals from Sable Island, Nova Scotia. The data used here is a subset of the data published in Lidgard et al. (2014) and was shared for educational purposes by the researchers of the Ocean Tracking Network (OTN) Canada Sable Island Grey Seal Bioprobes project (\url{http://members.oceantrack.org/data/discovery/SGS.htm}). To start with the simplest example possible, we will make a \texttt{SpatialLines} object with the data from only one of the seals.

<<seal1>>=
# Read files with movement data
sealMov <- read.csv("Seal3_169_2_01_1.csv")
# Let's look at the first rows to get a sense of what's in the file
head(sealMov)
# How many seals do we have and what's their ID
unique(sealMov$SealID)
# Let's focuss on seal 66486, drop the locations from all other seals
seal1 <- subset(sealMov, SealID == 66486 ,drop=TRUE)
@

Now we want to order the locations of the seal by date, so when we connect the points with lines they are ordered to represent the movement of the animal. To do this, we will use one of the Date-Time classes, which are important base classes in \texttt{R}.

<<OrderingDate>>=
# The current class of the date column is factor, which is not great for ordering dates
class(seal1$Date)
# We will transform this column to a POSIXlt class, which is a base Date-Time class in R. This class understand how time should be ordered (e.g., year before month). To use POSIXlt, you need to specify the date format and the time zone (which we are assuming is UTC), see ?POSIXlt

# To see how the date is formated currently, let's look at the Date column
seal1$Date[1]
# Looks like Day.Month.Year Hour:Minute:Second
seal1$Date <- as.POSIXlt(seal1$Date, format="%d.%m.%y %H:%M:%S", zone="UTC")
# Now the class is POSIXlt
class(seal1$Date)
# We can now order the seal1 object by date and time
seal1 <- seal1[order(seal1$Date),]
@

Now, we will create a \texttt{SpatialPointsDataFrame} object based on the locations of the seal like. We will use one of the method we discussed in the last tutorial. 

<<sealSpPoint>>=
# Create a SpatialPointsDataFrame by assigning the coordinates
coordinates(seal1) <- ~Lon + Lat
# Assign the geographic CRS, which we are assuming is WGS84
proj4string(seal1) <- CRS("+proj=longlat +datum=WGS84")
# Now we have a SpatialPointsDataFrame object
class(seal1)
@

Now we will create a \texttt{Line} using the \texttt{SpatialPointsDataFrame}.

<<sealLine>>=
# Create a Line object
seal1L <- Line(seal1)
# Now the class is Line
class(seal1L)
# Can we plot it?
plot(seal1L)
# What's the info
summary(seal1L)
@

As shown above, the \texttt{Line} object we've created is not useful in itself. All it does is assess that all of the coordinates are associated with one continuous \texttt{Line}. In our case, all of the locations of seal 66486 are associated with one continuous movement path. The \texttt{Line} object gets incorporated in a \texttt{Lines} object. Note that the \texttt{Lines} object is a list of \texttt{Line} objects with one associated ID.

<<sealLines>>=
# Create a Lines object using a Line
seal1Ls <- Lines(seal1L, ID="seal1")
# You can't plot it
plot(seal1Ls)
# And the info is not that interesting
summary(seal1Ls)
@

The \texttt{Lines} object is also of little interest by itself, it's only a building block for the \texttt{SpatialLines}.

<<sealSpLines>>=
# Create a SpatialLines object with the Lines object. Note that to make SpatialLines you need a list of Lines, not just one Lines object
seal1SpL <- SpatialLines(list(seal1Ls))
# Now we finnally have a Spatial object that can be plotted
plot(seal1SpL)
# Let's add the location points
plot(seal1, add=TRUE, pch=19, cex=0.5)
# and a box around the plot
box()
@

Because \texttt{Line} and \texttt{Lines} are not \texttt{Spatial} object and only the \texttt{SpatialLines} object is a \texttt{Spatial} object (with a CRS), you need to specify the CRS. Here we are using the same CRS as the seal locations. Note that the \texttt{SpatialLines}  assume that the animal is moving straight between the points, which may not make sense in all type of CRS, including in nonprojected CRS like the WGS84.

<<spLProj>>=
# Check the current CRS
proj4string(seal1SpL)
# Assign the same CRS as the seal locations which are the base of this SpatialLines object
proj4string(seal1SpL) <- proj4string(seal1)
@

So I've shown you the step-by-step way to go from \texttt{SpatialPointsDataframe} to \texttt{SpatialLines}, but you could combined all of the lines to make one code line.

<<CreateSpLin1L>>=
seal1SpL2 <- SpatialLines(list(Lines(Line(seal1), ID="seal1")), 
                         proj4string=CRS(proj4string(seal1)))
# Because we are just lumping the functions from above, it should give you exactly the same results
identical(seal1SpL, seal1SpL2)
@

An even quicker way to create a \texttt{SpatialLines} from a \texttt{SpatialPointsDataFrame} is to use \texttt{as}.

<<SpPsSpLs>>=
# Creating a SpatialLines from the seal1 SpatialPoints object supper quickly.
seal1SpL3 <- as(seal1, "SpatialLines")
# This will not be exactly the same
identical(seal1SpL, seal1SpL3)
# The only difference here is that sealSpL3 that we've just created has the defaut ID value: "ID". If we create a new SpatialLines using the Lines and Line functions and use "ID" for the ID, this new object will be exactly the same as seal1SpL3.
seal1SpL4 <- SpatialLines(list(Lines(Line(seal1), ID="ID")), 
                          proj4string=CRS(proj4string(seal1)))
identical(seal1SpL3, seal1SpL4)
@

\subsubsection{Three movement paths}

In our first example, we only had one continous movement path. However, we might want a \texttt{SpatialLines} object with multiple movement paths. For example, we might want to have one \texttt{SpatialLines} object with the movement path of the three seals in our sealMov \texttt{data.frame}. To start, we would like to have each path to be a different \texttt{Lines} object with a different ID representing the seal ID. For this, we will need to create a \texttt{Lines} object with the coordinates of each seal. 

<<seal2Lines>>=
# Before we create the line objects we would like to order the sealMov based on individual and then on time. Thus, we need to make the date column a POSIXlt object. See above for further explanation.
sealMov$Date <- as.POSIXlt(sealMov$Date, format="%d.%m.%y %H:%M:%S", zone="UTC")
# We will select the row by sealID below, so we only need to order it by dates
sealMovD <- sealMov[order(sealMov$Date),]
# Check the first rows, now dates are in order but seal IDs are mixed
head(sealMovD)

# We want to create a Lines object with the data points associated with each seal. 

#If we did it for one seal, e.g.: SealID: 66506, we could do it as follow:
seal2Ls <- Lines(Line(sealMovD[sealMovD$SealID == 66506, c("Lon","Lat")]), ID = 66506)
@

To most efficient way to do a \texttt{Lines} object for each seal, is through \texttt{lapply}. \texttt{lapply} is a base function in \texttt{R} that applies a function repeatly to an object. There are many such functions in \texttt{R}. \texttt{lapply} returns a list. Here is a few very easy examples of how to use \texttt{lapply}.

<<lapplyeg>>=
# Apply lapply to a simple function

# Create a matrix
oo <- matrix(1:3,nrow=3)
# Just a column with value 1-3
oo
# Use lapply with a function that adds 1 to the value of each row of oo
lapply(oo, function(x){x+1})
# You could do something more complicated that use two different object. E.g., let's a create new matrix
aa <- matrix(1:6, nrow=3)
# It's a matrix with value from 1-6 in two columns
aa
# Now we want to do the mean of each row using lapply. We use oo as the row index, as in:

# if oo is 1, do mean(aa[1,])
lapply(oo, function(x){mean(aa[x,])})
@

Now we will use \texttt{lapply} to do a list of \texttt{Lines}. We are going to use the SealID as our index and create one \texttt{Lines} object per seal.

<<3sealLines>>=
# Get the ID of the 3 seals
sealIndex <- unique(sealMovD$SealID)
sealIndex
# now use the lapply on the code we described above: Lines(Line(sealMovD[sealMovD$SealID == 66506, c("Lon","Lat")]), ID = 66506)

# Note that the ID of each Lines object is the seal ID
sealsLs <- lapply(sealIndex, 
       function(x){Lines(Line(sealMovD[sealMovD$SealID == x, c("Lon","Lat")]), ID = x)})
# We should get a list back
class(sealsLs)
# And the elements of this list should be a Lines object
class(sealsLs[[1]])
@

We can now use this list to create a \texttt{SpatialLines}.

<<allsealsSP>>=
# Create a SpatialLines based on the list and assign the CRS
sealsSpL <- SpatialLines(sealsLs, 
                          proj4string=CRS(proj4string(seal1)))
# We can plot it and assign different coulors to the different Lines
plot(sealsSpL, col=c("red","purple","orange"))
# with a box around the plot
box()
@

In the last tutorial, I showed how \texttt{SpatialPoints} had an analogue with attributes called \texttt{SpatialPointsDataFrame}. We can also create a \texttt{SpatialLinesDataFrame} from a \texttt{SpatialLines} object. Here we are going to add attributes to the seal movement paths.


<<SpLDF>>=
# We are going to create a data.frame with 2 columns to add as attributes to each seal. This is invented data; I'm going to assign arbitrary values to each seal that represents their age and weight
sealAtt <- as.data.frame(cbind(age=c(1.2,3,3.2), weight=c(110, 126, 156)))
# We match the attributes based on ID and we need to assign the ID as the row name of our data.frame
rownames(sealAtt) <- sealIndex
# Now we can create the SpatialLinesDataFrame
sealsSpLdf <- SpatialLinesDataFrame(sealsSpL,data=sealAtt)
# Info
summary(sealsSpLdf)
# Now you could plot the Lines and color them based on the values of the attributes, e.g. based on their weight
spplot(sealsSpLdf, zcol="weight")
@

Note that we have been putting one \texttt{Line} object per \texttt{Lines} object. However, a \texttt{Lines} object can contain multiple \texttt{Line} objects, as long as these can be associated with a single ID. I'm not sure when this would be useful, but one example I could think of, is if you had a movement path that was disconnected. For example, if you had multiple foraging trips for one individual. Here I'm only going to show you how this work by putting all three seals as one \texttt{Lines} objects rather than as one \texttt{Lines} object per individual.


<<allsealsSPLine>>=
# The big difference here is that we are using 1 Lines for all 3 seals. Thus, we use sapply to create a list of Line objects (as opposed to a list of Lines objects)
sealsL <- lapply(sealIndex, 
       function(x){Line(sealMovD[sealMovD$SealID == x, c("Lon","Lat")])})
# We should get a list back
class(sealsL)
# And now the elements of this list should be a Line object
class(sealsL[[1]])
# compare to Lines associated with the sealsLs that we created above
class(sealsLs[[1]])
# If we create a Lines object with the 3 Line objects, we won't be able to assign to each Line the seal ID, we will need to give it only one ID which groups the 3 Line, here just "OTN seals".
sealsLs2 <- Lines(sealsL, ID="OTN seals")
# You can try to put 3 IDs put it won't work
sealsLs3 <- Lines(sealsL, ID=sealIndex)
# Now we can make a SpatialLines from the new Lines object we have created, remember that SpatialLines needs a list of Lines
sealsSpL2 <- SpatialLines(list(sealsLs2), proj4string=CRS(proj4string(seal1)))
# We can plot this object, but assigning colour is not going to work in the same way. Only the first colour is going to be used because all of these 3 movement paths are group together under one ID.
plot(sealsSpL2, col=c("red","purple","orange"))
box()
@

The disadvantage here is that we can only assign one set of attributes for the three seals at the same time. We can't differentiate between them. That's because you link the attributes to the \texttt{SpatialLines} based on the ID slot, which is only attributed to the \texttt{Lines}, not the \texttt{Line}. This is demonstrated in the example below.

<<linesfor3seal>>=
# We can't link data.frame we have created above
sealsSpLdf2 <- SpatialLinesDataFrame(sealsSpL2, data=sealAtt)
# Even if we say to match it without the ID names
sealsSpLdf2 <- SpatialLinesDataFrame(sealsSpL2, data=sealAtt, match.ID=FALSE)
# You could do it if your data.frame has only one row
sealsSpLdf2 <- SpatialLinesDataFrame(sealsSpL2, data=sealAtt[1,], match.ID=FALSE)
# And that's becase the sealsSpL2 only has one Lines object
length(slot(sealsSpLdf2,"lines"))
# Compare to the previous one that had 3
length(slot(sealsSpLdf,"lines"))
@

So what you should gather from this, is that you should create a \texttt{Lines} object for all the entities you're interested in separating or that you'll need to associate with attributes.

\begin{Exercise}

Import the waveglider.csv file, which is a modified version of the wg\_m42\_waveglider.csv found on the OTN Ocean Glidders and Marine Observation website (\url{http://gliders.oceantrack.org/ajax/waveglider/}), see main page for more information (\url{http://gliders.oceantrack.org}). Create a \texttt{SpatialLinesDataFrame} with this file. Make one \texttt{Lines} per day. You can use the day column to help you with this. Don't forget to order the rows by time. Note that in this case the time is in seconds since Jan 1 1970 00:00 UTC. To create a correct \texttt{R} date time object, use: \texttt{as.POSIXct(waveglider\$time, origin="1970-01-01")}.

\end{Exercise}

\begin{Exercise}
Plot this \texttt{SpatialLinesDataFrame}. Use different colours for each day.
\end{Exercise}

%\section{\texttt{SpatialPolygons}}
%Polygon from the bbox.

\section{References}
Lidgard DC, Bowen WD, Jonsen ID, Iverson SJ (2014) Predator-borne acoustic transceivers and GPS tracking reveal spatial and temporal patterns of encounters with acoustically-tagged fish in the open ocean. Mar Ecol Prog Ser 501:157-168

\end{document}
