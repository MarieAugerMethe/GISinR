\documentclass{article}
\usepackage{hyperref}
\usepackage[top=2in, bottom=1.5in, left=1in, right=1in]{geometry}
\usepackage{exercise}

% For formating of R code
%\newcommand{\SpatialPolygons}{\texttt{SpatialPolygons}}
%\newcommand{\Polygons}{\texttt{Polygons}}
%\newcommand{\Polygon}{\texttt{Polygon}}
%\newcommand{\SpatialLines}{\texttt{SpatialLines}}

% For tilde
\usepackage{xspace}
\newcommand{\mytilde}{\lower.80ex\hbox{\char`\~}\xspace}

\begin{document}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Hooks
% Hook for tilde
<<setup, include=FALSE>>=
library(knitr)
hook_source = knit_hooks$get('source')
knit_hooks$set(source = function(x, options) {
  txt = hook_source(x, options)
  # extend the default source hook
  gsub('~', '\\\\mytilde', txt)
})
@
<<setupOp, include=FALSE>>=
opts_chunk$set(fig.width=4, fig.height=4, fig.align="center", tidy=TRUE,
               tidy.opts=list(blank=FALSE, width.cutoff=52),
               size="large")
@

\author{Marie Auger-M\'eth\'e}
\title{GIS in R: Tutorial 4}
\date{}
\maketitle

\large
\section{Extracting informatiom}

% Mayb put that part with polygons

rgeos 
Geometry Engine - Open Source (GEOS) and Java Topology Suite (JTS) only handle planar geometries, so the data should be projected. 

I think that's in contrast to things like gDistance package and spdep which has great circle distance?

<<rgeos>>=
library(rgeos)
# Minimum distance?
getScale()
@

JTS and GEOS follow the OpenGIS(R) simple features specificaion, in whic polygons may have only one exterior boundary ring and an unlimited number of interior boundaries (i.e. unlimitedt number of holes). Becasue \texttt{sp} \texttt{Polygons} are multi-polygon objects (can have multiple \texttt{Polygon} objects that each have a distinct exterior boundary, e.g. province mainland and all of the province islands can be lumpped under one \texttt{Polygons} object and thus associated with one ID) there is no direct match between GEOS simple feature polygons and \texttt{SpatialPolygons} objects. This means that for \texttt{Polygons} object to be exported to GEOS, they need to have an appropriate \texttt{comment} attribute. This only affects polygons, not points and lines. Polygons can be checked using the createSPComment function from rgeos or the maptools checkPolygonHoles, see p.132- 133 Bivand

Get area, many ways, rgeos function need planar. The area slot will give you an area in any uint... but taht moght not make sense.

<<>>=
Area <- gArea(olinda_utm, byid = TRUE)
totArea <- gArea(olinda_utm)
olinda_utm$area <- sapply(slot(olinda_utm, "polygons"), slot, "area")
all.equal(unname(Area), olinda_utm$area)
@

<<addnewcol>>=
olinda_utm$dens <- olinda_utm$V014/(olinda_utm$area/1e+06)
@


Maybe use blue shark data and seal data.

I've included the Northwest Atalantic Fisheries Organization (NAFO) divisions shapefile, which I found on the NAFO website at \ulr{http://www.nafo.int/data/frames/data.html}. 

<<NAFOZone>>=
library(rgdal)
NAFO <- readOGR(".", "Divisions")
# Note that they use NAD83 as a geographic CRS
proj4string(NAFO)
plot(NAFO)
@


Clipping, simply by subseting.



<<>>=
SPobj1
SPobj2
# NEED TO HAVE EXACTLY THE SAME PROJ4
clipSPobj1 <- SPobj1[SPobj2,]
@

Maybe do it by clipping the rivers available in the study area of Kintama example.
Talk about over, how it gives the attributes from the for the object2, instead of obj1.

<<over>>=
sel <- over(stations, lnd)
head(sel,15)
names(lnd)
names(stations)
summary(sel)

@

Use aggregate length with spatialpoints to get at the number of points in a polygon

<<Aggregate>>=

@


Create random points

<<>>=
library(spatstat)
dran <- runifpoint(100, win = as.vector(t(bbox(ds))))
#create 100 random points
plot(ds)
plot(dran, add = T)
@


\end{document}